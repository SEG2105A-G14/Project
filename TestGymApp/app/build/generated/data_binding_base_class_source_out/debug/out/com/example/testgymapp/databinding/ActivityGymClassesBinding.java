// Generated by view binder compiler. Do not edit!
package com.example.testgymapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.testgymapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGymClassesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Spinner classDay;

  @NonNull
  public final TextView classDesc;

  @NonNull
  public final Spinner classDifficulty;

  @NonNull
  public final ListView classList;

  @NonNull
  public final Button completeClassEdit;

  @NonNull
  public final Button deleteClassButton;

  @NonNull
  public final EditText editClassDescription;

  @NonNull
  public final EditText editClassName;

  @NonNull
  public final LinearLayout editClassWindow;

  @NonNull
  public final Button endClassCreate;

  @NonNull
  public final Spinner endTime;

  @NonNull
  public final Button exit;

  @NonNull
  public final LinearLayout instructorClass;

  @NonNull
  public final EditText maxCap;

  @NonNull
  public final TextView nameCLass;

  @NonNull
  public final Spinner startTime;

  private ActivityGymClassesBinding(@NonNull ConstraintLayout rootView, @NonNull Spinner classDay,
      @NonNull TextView classDesc, @NonNull Spinner classDifficulty, @NonNull ListView classList,
      @NonNull Button completeClassEdit, @NonNull Button deleteClassButton,
      @NonNull EditText editClassDescription, @NonNull EditText editClassName,
      @NonNull LinearLayout editClassWindow, @NonNull Button endClassCreate,
      @NonNull Spinner endTime, @NonNull Button exit, @NonNull LinearLayout instructorClass,
      @NonNull EditText maxCap, @NonNull TextView nameCLass, @NonNull Spinner startTime) {
    this.rootView = rootView;
    this.classDay = classDay;
    this.classDesc = classDesc;
    this.classDifficulty = classDifficulty;
    this.classList = classList;
    this.completeClassEdit = completeClassEdit;
    this.deleteClassButton = deleteClassButton;
    this.editClassDescription = editClassDescription;
    this.editClassName = editClassName;
    this.editClassWindow = editClassWindow;
    this.endClassCreate = endClassCreate;
    this.endTime = endTime;
    this.exit = exit;
    this.instructorClass = instructorClass;
    this.maxCap = maxCap;
    this.nameCLass = nameCLass;
    this.startTime = startTime;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGymClassesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGymClassesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_gym_classes, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGymClassesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.classDay;
      Spinner classDay = ViewBindings.findChildViewById(rootView, id);
      if (classDay == null) {
        break missingId;
      }

      id = R.id.classDesc;
      TextView classDesc = ViewBindings.findChildViewById(rootView, id);
      if (classDesc == null) {
        break missingId;
      }

      id = R.id.classDifficulty;
      Spinner classDifficulty = ViewBindings.findChildViewById(rootView, id);
      if (classDifficulty == null) {
        break missingId;
      }

      id = R.id.classList;
      ListView classList = ViewBindings.findChildViewById(rootView, id);
      if (classList == null) {
        break missingId;
      }

      id = R.id.completeClassEdit;
      Button completeClassEdit = ViewBindings.findChildViewById(rootView, id);
      if (completeClassEdit == null) {
        break missingId;
      }

      id = R.id.deleteClassButton;
      Button deleteClassButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteClassButton == null) {
        break missingId;
      }

      id = R.id.editClassDescription;
      EditText editClassDescription = ViewBindings.findChildViewById(rootView, id);
      if (editClassDescription == null) {
        break missingId;
      }

      id = R.id.editClassName;
      EditText editClassName = ViewBindings.findChildViewById(rootView, id);
      if (editClassName == null) {
        break missingId;
      }

      id = R.id.editClassWindow;
      LinearLayout editClassWindow = ViewBindings.findChildViewById(rootView, id);
      if (editClassWindow == null) {
        break missingId;
      }

      id = R.id.endClassCreate;
      Button endClassCreate = ViewBindings.findChildViewById(rootView, id);
      if (endClassCreate == null) {
        break missingId;
      }

      id = R.id.endTime;
      Spinner endTime = ViewBindings.findChildViewById(rootView, id);
      if (endTime == null) {
        break missingId;
      }

      id = R.id.exit;
      Button exit = ViewBindings.findChildViewById(rootView, id);
      if (exit == null) {
        break missingId;
      }

      id = R.id.instructorClass;
      LinearLayout instructorClass = ViewBindings.findChildViewById(rootView, id);
      if (instructorClass == null) {
        break missingId;
      }

      id = R.id.maxCap;
      EditText maxCap = ViewBindings.findChildViewById(rootView, id);
      if (maxCap == null) {
        break missingId;
      }

      id = R.id.nameCLass;
      TextView nameCLass = ViewBindings.findChildViewById(rootView, id);
      if (nameCLass == null) {
        break missingId;
      }

      id = R.id.startTime;
      Spinner startTime = ViewBindings.findChildViewById(rootView, id);
      if (startTime == null) {
        break missingId;
      }

      return new ActivityGymClassesBinding((ConstraintLayout) rootView, classDay, classDesc,
          classDifficulty, classList, completeClassEdit, deleteClassButton, editClassDescription,
          editClassName, editClassWindow, endClassCreate, endTime, exit, instructorClass, maxCap,
          nameCLass, startTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
